# -*- coding: utf-8 -*-
"""5mza-data-analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-voXdwHeQ8rp5lLP5TePj1fhI7qio4Ms
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

path = '/content/drive/My Drive/iGEM2020/Dry Lab Stuff/Human-protein-study/PfEMP1-5MZA--Ananth/csv-files/cleaned-trial0.csv'
path0= '/content/drive/My Drive/iGEM2020/Dry Lab Stuff/Human-protein-study/PfEMP1-5MZA--Ananth/'
df = pd.read_csv(path)
df.drop('Unnamed: 0',axis=1,inplace=True)

df.columns

df.head(10)

df.info()

wild_type = df[df.inhibitor_type=='wild_type']
wild_type

wild_type['Interaction Energy'].plot.bar(alpha=0.3)

wild_type['StabilityGroup2'].plot.bar()

sns.barplot(x='fname',y='Interaction Energy', data=wild_type)



df1 = df[['fname', 'inhibitor_type', 'Group2_len', 'mresidue_no', 'swapaa','IntraclashesGroup2',
       'Interaction Energy', 'StabilityGroup2']].sort_values('Interaction Energy',ascending=True)
df_wt = df1[df1.inhibitor_type=='wild_type'] #contains DataFrame with wild-type data
df_mut = df1[df1.inhibitor_type !='wild_type']  #contains mutant data



# Relationship between inhibitor type and Interaction energy

fig,axes = plt.subplots(nrows=2,ncols=1,figsize=(15,13))

#sns.set_style("ticks")
sns.despine()
sns.axes_style("whitegrid")
sns.set_context("talk")

sns.swarmplot(x='inhibitor_type',y='Interaction Energy',hue='swapaa',data=df_mut, ax=axes[0], palette='gnuplot',dodge=True)
sns.barplot(x='fname',y='Interaction Energy',data=wild_type, ax=axes[0],alpha=0.29,palette='dark', label='wild-type')

sns.swarmplot(x='inhibitor_type',y='StabilityGroup2',hue='swapaa',data=df_mut, ax=axes[1], palette='gnuplot',dodge=True)
sns.barplot(x='fname',y='StabilityGroup2',data=wild_type, ax=axes[1],palette='dark',alpha=0.29)

axes[0].set_xlabel('', fontsize=18)
axes[0].set_ylabel('Interaction Energy', fontsize=22)
axes[1].set_xlabel('Inhibitor Type', fontsize=22)
axes[1].set_ylabel('Stability of Peptide', fontsize=22)

#axes[0].legend(, loc=2, borderaxespad=0.)
axes[0].legend(bbox_to_anchor=(1.05, 1), loc=2,fancybox=True, framealpha=1, shadow=True, borderpad=1)
axes[1].legend_.remove()

axes[0].tick_params(axis='both', which='major', labelsize=10)

axes[0].set_xticklabels(['model1 (len=9)','model2 (len=8)','model3 (len=10)','model4 (len=6)','model5 (len=6)'])
axes[1].set_xticklabels(['model1 (len=9)','model2 (len=8)','model3 (len=10)','model4 (len=6)','model5 (len=6)'])

axes[0].tick_params(labelsize=14)
axes[1].tick_params(labelsize=14)

plt.suptitle('5MZA Computational Saturated Mutagenesis Results', fontsize=26)

plt.show()

table1 = pd.crosstab(index=df['inhibitor_type'],columns=df['mresidue_no'],values=df['Interaction Energy'],aggfunc=np.mean, )
table1

for i in range(5):
    a=wild_type['Interaction Energy'][wild_type.fname=='inhibitor'+str(i+1)+'.pdb'].values
    print(a[0])

fig,axes = plt.subplots(nrows=5,ncols=1,figsize=(16,17))

sns.set_style("whitegrid")
sns.despine()
for i in range(5):
    sns.swarmplot(x='mresidue_no',y='Interaction Energy', data = df_mut[df_mut['inhibitor_type']== str(i+1)], palette='gnuplot',alpha=0.8, ax=axes[i], hue='swapaa',dodge=True)
    val = wild_type['Interaction Energy'][wild_type.fname=='inhibitor'+str(i+1)+'.pdb'].values[0]
    axes[i].axhline(val,ls='--',color='black', label='wild-type',alpha=0.5)
    axes[i].set_xlabel('Residue number',fontsize=18)
    if i!=0:
        axes[i].legend_.remove()
    else:
        axes[i].legend(bbox_to_anchor=(1.2, -0.2),fancybox=True, framealpha=1, shadow=True, borderpad=1)
        axes[i].legend_.set_title('Model'+str(i+1))

plt.suptitle('5MZA Computational Saturated Mutagenesis results')
#plt.tight_layout()
plt.show()

model1 = df_mut[df_mut['inhibitor_type']== '1']

m1_energy_min = model1.loc[model1.groupby("mresidue_no")["Interaction Energy"].idxmin()]
#m1_energy_min.to_csv(os.path.join(path0,'model1-min-interaction-energy.csv'))
m1_energy_min

fig,axes = plt.subplots(nrows=5,ncols=1,figsize=(12,16))

sns.set_style("whitegrid")
sns.despine()
sns.swarmplot(x='mresidue_no',y='Interaction Energy', data = df_mut[df_mut['inhibitor_type']== '1'], palette='gnuplot',alpha=0.8, ax=axes[0])
sns.swarmplot(x='mresidue_no',y='Interaction Energy', data = df_mut[df_mut['inhibitor_type']== '2'], palette='gnuplot',alpha=0.8, ax=axes[1])
sns.swarmplot(x='mresidue_no',y='Interaction Energy', data = df_mut[df_mut['inhibitor_type']== '3'], palette='gnuplot',alpha=0.8, ax=axes[2])
sns.swarmplot(x='mresidue_no',y='Interaction Energy', data = df_mut[df_mut['inhibitor_type']== '4'], palette='gnuplot',alpha=0.8, ax=axes[3])
sns.swarmplot(x='mresidue_no',y='Interaction Energy', data = df_mut[df_mut['inhibitor_type']== '5'], palette='gnuplot',alpha=0.8, ax=axes[4])

for i in range(5):
    axes[i].legend(bbox_to_anchor=(1.05, 1), loc=5,fancybox=True, framealpha=1, shadow=True, borderpad=1)
    axes[i].legend_.set_title('Model'+str(i+1))
    axes[i].set_xlabel('Residue number')
    axes[i].set_ylabel('Interaction Energy',fontsize=16)_t

plt.suptitle('5MZA Saturated Mutagenesis results')
plt.tight_layout()
plt.show()

### Obtain HEATMAP of scores


def Interaction_energy_heatmap(csv_file_path):

	df = pd.read_csv(csv_file_path)   # read the csv file from the given path 
	df.drop('Unnamed: 0',axis=1, inplace=True)  # if there is a column called "Unnamed :0" then it is drop , is it is not there please comment it out
	df.Pdb = df.Pdb.apply(lambda x : x.split('/')[-1]) # based on the previous convention follow, we rename the elements in the column 'Pdb' and replace it with the name instead of the entire path
	df['mresidue'] = df.Pdb.apply(lambda x : x.split('_')[2]) # create a new column that contains the mutated residue no based on the name of the row in the 'Pdb' column
	df['amino_acid'] = df.Pdb.apply(lambda x : x.split('_')[3]) # create a new column that contains the mutated amino acid name based on the name of the row in the 'Pdb' column

	cols = df.columns.tolist()  # In the next three lines we are renaming the columns
	cols = cols[0:1] + cols[-2:] + cols[1:-2]
	df = df[cols]

	heatmap = df.groupby(['amino_acid','mresidue']).mean()['Interaction Energy'].unstack() # Create a new dataframe for creating a heatmap that uses the columns 'amino_acid' and 'mresidue' that we created earlier
	
	fig = plt.figure(figsize=(10,9))  # create a figure object and some plotting conventions
	ax = fig.add_subplot(1, 1, 1)
	sns.heatmap(heatmap,cmap='viridis',fmt='.2f',annot=True,axes=ax)
	ax.set_title('Interaction Energy for SwM_Full',fontsize=22)
	ax.set_xlabel('Mutated Residue No',fontsize=18)
	ax.set_ylabel('Amino Acid',fontsize=18)
	
	return fig
	
	
	
def get_hybrid_peptide(csvfile_path):   # reads through the scores.csv of the Saturated Mutagenesis file and gives data on hybrid peptide -- output is written to a .csv called "hybrid_peptide.csv"

	df = pd.read_csv(csvfile_path)
	df.drop('Unnamed: 0',axis=1, inplace=True)
	df.Pdb = df.Pdb.apply(lambda x : x.split('/')[-1])
	df['mresidue'] = df.Pdb.apply(lambda x : x.split('_')[2])
	df['amino_acid'] = df.Pdb.apply(lambda x : x.split('_')[3])

	cols = df.columns.tolist()
	cols = cols[0:1] + cols[-2:] + cols[1:-2]
	df = df[cols]

	best_mut = df.iloc[df.groupby('mresidue')['Interaction Energy'].idxmin()][['Pdb','mresidue','amino_acid','Interaction Energy']]
	best_mut.to_csv('hybrid_peptide.csv')
	
	return best_mut
	
